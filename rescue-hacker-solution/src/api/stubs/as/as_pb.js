/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var common_common_pb = require('../common/common_pb.js');
var gw_gw_pb = require('../gw/gw_pb.js');
goog.exportSymbol('proto.as.DeviceActivationContext', null, global);
goog.exportSymbol('proto.as.ErrorType', null, global);
goog.exportSymbol('proto.as.HandleDownlinkACKRequest', null, global);
goog.exportSymbol('proto.as.HandleErrorRequest', null, global);
goog.exportSymbol('proto.as.HandleProprietaryUplinkRequest', null, global);
goog.exportSymbol('proto.as.HandleUplinkDataRequest', null, global);
goog.exportSymbol('proto.as.RXWindow', null, global);
goog.exportSymbol('proto.as.SetDeviceLocationRequest', null, global);
goog.exportSymbol('proto.as.SetDeviceStatusRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.DeviceActivationContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.DeviceActivationContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.DeviceActivationContext.displayName = 'proto.as.DeviceActivationContext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.DeviceActivationContext.prototype.toObject = function(opt_includeInstance) {
  return proto.as.DeviceActivationContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.DeviceActivationContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.DeviceActivationContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    devAddr: msg.getDevAddr_asB64(),
    appSKey: (f = msg.getAppSKey()) && common_common_pb.KeyEnvelope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.DeviceActivationContext}
 */
proto.as.DeviceActivationContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.DeviceActivationContext;
  return proto.as.DeviceActivationContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.DeviceActivationContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.DeviceActivationContext}
 */
proto.as.DeviceActivationContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevAddr(value);
      break;
    case 2:
      var value = new common_common_pb.KeyEnvelope;
      reader.readMessage(value,common_common_pb.KeyEnvelope.deserializeBinaryFromReader);
      msg.setAppSKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.DeviceActivationContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.as.DeviceActivationContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.as.DeviceActivationContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.DeviceActivationContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAppSKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.KeyEnvelope.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes dev_addr = 1;
 * @return {string}
 */
proto.as.DeviceActivationContext.prototype.getDevAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dev_addr = 1;
 * This is a type-conversion wrapper around `getDevAddr()`
 * @return {string}
 */
proto.as.DeviceActivationContext.prototype.getDevAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevAddr()));
};


/**
 * optional bytes dev_addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevAddr()`
 * @return {!Uint8Array}
 */
proto.as.DeviceActivationContext.prototype.getDevAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.as.DeviceActivationContext.prototype.setDevAddr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional common.KeyEnvelope app_s_key = 2;
 * @return {?proto.common.KeyEnvelope}
 */
proto.as.DeviceActivationContext.prototype.getAppSKey = function() {
  return /** @type{?proto.common.KeyEnvelope} */ (
    jspb.Message.getWrapperField(this, common_common_pb.KeyEnvelope, 2));
};


/** @param {?proto.common.KeyEnvelope|undefined} value */
proto.as.DeviceActivationContext.prototype.setAppSKey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.as.DeviceActivationContext.prototype.clearAppSKey = function() {
  this.setAppSKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.as.DeviceActivationContext.prototype.hasAppSKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.HandleUplinkDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.as.HandleUplinkDataRequest.repeatedFields_, null);
};
goog.inherits(proto.as.HandleUplinkDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.HandleUplinkDataRequest.displayName = 'proto.as.HandleUplinkDataRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.as.HandleUplinkDataRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.HandleUplinkDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.HandleUplinkDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.HandleUplinkDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.HandleUplinkDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    joinEui: msg.getJoinEui_asB64(),
    fCnt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    adr: jspb.Message.getFieldWithDefault(msg, 5, false),
    dr: jspb.Message.getFieldWithDefault(msg, 6, 0),
    txInfo: (f = msg.getTxInfo()) && gw_gw_pb.UplinkTXInfo.toObject(includeInstance, f),
    rxInfoList: jspb.Message.toObjectList(msg.getRxInfoList(),
    gw_gw_pb.UplinkRXInfo.toObject, includeInstance),
    data: msg.getData_asB64(),
    deviceActivationContext: (f = msg.getDeviceActivationContext()) && proto.as.DeviceActivationContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.HandleUplinkDataRequest}
 */
proto.as.HandleUplinkDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.HandleUplinkDataRequest;
  return proto.as.HandleUplinkDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.HandleUplinkDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.HandleUplinkDataRequest}
 */
proto.as.HandleUplinkDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setJoinEui(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFPort(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDr(value);
      break;
    case 7:
      var value = new gw_gw_pb.UplinkTXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkTXInfo.deserializeBinaryFromReader);
      msg.setTxInfo(value);
      break;
    case 8:
      var value = new gw_gw_pb.UplinkRXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkRXInfo.deserializeBinaryFromReader);
      msg.addRxInfo(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 10:
      var value = new proto.as.DeviceActivationContext;
      reader.readMessage(value,proto.as.DeviceActivationContext.deserializeBinaryFromReader);
      msg.setDeviceActivationContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.HandleUplinkDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.as.HandleUplinkDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.as.HandleUplinkDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.HandleUplinkDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getJoinEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAdr();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getDr();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTxInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      gw_gw_pb.UplinkTXInfo.serializeBinaryToWriter
    );
  }
  f = message.getRxInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      gw_gw_pb.UplinkRXInfo.serializeBinaryToWriter
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getDeviceActivationContext();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.as.DeviceActivationContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes dev_eui = 1;
 * @return {string}
 */
proto.as.HandleUplinkDataRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.HandleUplinkDataRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.HandleUplinkDataRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.as.HandleUplinkDataRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes join_eui = 2;
 * @return {string}
 */
proto.as.HandleUplinkDataRequest.prototype.getJoinEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes join_eui = 2;
 * This is a type-conversion wrapper around `getJoinEui()`
 * @return {string}
 */
proto.as.HandleUplinkDataRequest.prototype.getJoinEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getJoinEui()));
};


/**
 * optional bytes join_eui = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getJoinEui()`
 * @return {!Uint8Array}
 */
proto.as.HandleUplinkDataRequest.prototype.getJoinEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getJoinEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.as.HandleUplinkDataRequest.prototype.setJoinEui = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 f_cnt = 3;
 * @return {number}
 */
proto.as.HandleUplinkDataRequest.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.as.HandleUplinkDataRequest.prototype.setFCnt = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 f_port = 4;
 * @return {number}
 */
proto.as.HandleUplinkDataRequest.prototype.getFPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.as.HandleUplinkDataRequest.prototype.setFPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool adr = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.HandleUplinkDataRequest.prototype.getAdr = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.as.HandleUplinkDataRequest.prototype.setAdr = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 dr = 6;
 * @return {number}
 */
proto.as.HandleUplinkDataRequest.prototype.getDr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.as.HandleUplinkDataRequest.prototype.setDr = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional gw.UplinkTXInfo tx_info = 7;
 * @return {?proto.gw.UplinkTXInfo}
 */
proto.as.HandleUplinkDataRequest.prototype.getTxInfo = function() {
  return /** @type{?proto.gw.UplinkTXInfo} */ (
    jspb.Message.getWrapperField(this, gw_gw_pb.UplinkTXInfo, 7));
};


/** @param {?proto.gw.UplinkTXInfo|undefined} value */
proto.as.HandleUplinkDataRequest.prototype.setTxInfo = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.as.HandleUplinkDataRequest.prototype.clearTxInfo = function() {
  this.setTxInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.as.HandleUplinkDataRequest.prototype.hasTxInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated gw.UplinkRXInfo rx_info = 8;
 * @return {!Array.<!proto.gw.UplinkRXInfo>}
 */
proto.as.HandleUplinkDataRequest.prototype.getRxInfoList = function() {
  return /** @type{!Array.<!proto.gw.UplinkRXInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, gw_gw_pb.UplinkRXInfo, 8));
};


/** @param {!Array.<!proto.gw.UplinkRXInfo>} value */
proto.as.HandleUplinkDataRequest.prototype.setRxInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.gw.UplinkRXInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gw.UplinkRXInfo}
 */
proto.as.HandleUplinkDataRequest.prototype.addRxInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.gw.UplinkRXInfo, opt_index);
};


proto.as.HandleUplinkDataRequest.prototype.clearRxInfoList = function() {
  this.setRxInfoList([]);
};


/**
 * optional bytes data = 9;
 * @return {string}
 */
proto.as.HandleUplinkDataRequest.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes data = 9;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.as.HandleUplinkDataRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.as.HandleUplinkDataRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.as.HandleUplinkDataRequest.prototype.setData = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional DeviceActivationContext device_activation_context = 10;
 * @return {?proto.as.DeviceActivationContext}
 */
proto.as.HandleUplinkDataRequest.prototype.getDeviceActivationContext = function() {
  return /** @type{?proto.as.DeviceActivationContext} */ (
    jspb.Message.getWrapperField(this, proto.as.DeviceActivationContext, 10));
};


/** @param {?proto.as.DeviceActivationContext|undefined} value */
proto.as.HandleUplinkDataRequest.prototype.setDeviceActivationContext = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.as.HandleUplinkDataRequest.prototype.clearDeviceActivationContext = function() {
  this.setDeviceActivationContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.as.HandleUplinkDataRequest.prototype.hasDeviceActivationContext = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.HandleProprietaryUplinkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.as.HandleProprietaryUplinkRequest.repeatedFields_, null);
};
goog.inherits(proto.as.HandleProprietaryUplinkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.HandleProprietaryUplinkRequest.displayName = 'proto.as.HandleProprietaryUplinkRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.as.HandleProprietaryUplinkRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.HandleProprietaryUplinkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.HandleProprietaryUplinkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.HandleProprietaryUplinkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    macPayload: msg.getMacPayload_asB64(),
    mic: msg.getMic_asB64(),
    txInfo: (f = msg.getTxInfo()) && gw_gw_pb.UplinkTXInfo.toObject(includeInstance, f),
    rxInfoList: jspb.Message.toObjectList(msg.getRxInfoList(),
    gw_gw_pb.UplinkRXInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.HandleProprietaryUplinkRequest}
 */
proto.as.HandleProprietaryUplinkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.HandleProprietaryUplinkRequest;
  return proto.as.HandleProprietaryUplinkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.HandleProprietaryUplinkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.HandleProprietaryUplinkRequest}
 */
proto.as.HandleProprietaryUplinkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMacPayload(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMic(value);
      break;
    case 3:
      var value = new gw_gw_pb.UplinkTXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkTXInfo.deserializeBinaryFromReader);
      msg.setTxInfo(value);
      break;
    case 4:
      var value = new gw_gw_pb.UplinkRXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkRXInfo.deserializeBinaryFromReader);
      msg.addRxInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.as.HandleProprietaryUplinkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.as.HandleProprietaryUplinkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.HandleProprietaryUplinkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMacPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTxInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      gw_gw_pb.UplinkTXInfo.serializeBinaryToWriter
    );
  }
  f = message.getRxInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      gw_gw_pb.UplinkRXInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes mac_payload = 1;
 * @return {string}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMacPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes mac_payload = 1;
 * This is a type-conversion wrapper around `getMacPayload()`
 * @return {string}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMacPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMacPayload()));
};


/**
 * optional bytes mac_payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMacPayload()`
 * @return {!Uint8Array}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMacPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMacPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.as.HandleProprietaryUplinkRequest.prototype.setMacPayload = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes mic = 2;
 * @return {string}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes mic = 2;
 * This is a type-conversion wrapper around `getMic()`
 * @return {string}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMic()));
};


/**
 * optional bytes mic = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMic()`
 * @return {!Uint8Array}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMic()));
};


/** @param {!(string|Uint8Array)} value */
proto.as.HandleProprietaryUplinkRequest.prototype.setMic = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional gw.UplinkTXInfo tx_info = 3;
 * @return {?proto.gw.UplinkTXInfo}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getTxInfo = function() {
  return /** @type{?proto.gw.UplinkTXInfo} */ (
    jspb.Message.getWrapperField(this, gw_gw_pb.UplinkTXInfo, 3));
};


/** @param {?proto.gw.UplinkTXInfo|undefined} value */
proto.as.HandleProprietaryUplinkRequest.prototype.setTxInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.as.HandleProprietaryUplinkRequest.prototype.clearTxInfo = function() {
  this.setTxInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.hasTxInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated gw.UplinkRXInfo rx_info = 4;
 * @return {!Array.<!proto.gw.UplinkRXInfo>}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getRxInfoList = function() {
  return /** @type{!Array.<!proto.gw.UplinkRXInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, gw_gw_pb.UplinkRXInfo, 4));
};


/** @param {!Array.<!proto.gw.UplinkRXInfo>} value */
proto.as.HandleProprietaryUplinkRequest.prototype.setRxInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.gw.UplinkRXInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gw.UplinkRXInfo}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.addRxInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.gw.UplinkRXInfo, opt_index);
};


proto.as.HandleProprietaryUplinkRequest.prototype.clearRxInfoList = function() {
  this.setRxInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.HandleErrorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.HandleErrorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.HandleErrorRequest.displayName = 'proto.as.HandleErrorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.HandleErrorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.HandleErrorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.HandleErrorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.HandleErrorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    error: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fCnt: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.HandleErrorRequest}
 */
proto.as.HandleErrorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.HandleErrorRequest;
  return proto.as.HandleErrorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.HandleErrorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.HandleErrorRequest}
 */
proto.as.HandleErrorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 3:
      var value = /** @type {!proto.as.ErrorType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.HandleErrorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.as.HandleErrorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.as.HandleErrorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.HandleErrorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional bytes dev_eui = 1;
 * @return {string}
 */
proto.as.HandleErrorRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.HandleErrorRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.HandleErrorRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.as.HandleErrorRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ErrorType type = 3;
 * @return {!proto.as.ErrorType}
 */
proto.as.HandleErrorRequest.prototype.getType = function() {
  return /** @type {!proto.as.ErrorType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.as.ErrorType} value */
proto.as.HandleErrorRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string error = 4;
 * @return {string}
 */
proto.as.HandleErrorRequest.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.as.HandleErrorRequest.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 f_cnt = 5;
 * @return {number}
 */
proto.as.HandleErrorRequest.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.as.HandleErrorRequest.prototype.setFCnt = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.HandleDownlinkACKRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.HandleDownlinkACKRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.HandleDownlinkACKRequest.displayName = 'proto.as.HandleDownlinkACKRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.HandleDownlinkACKRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.HandleDownlinkACKRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.HandleDownlinkACKRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.HandleDownlinkACKRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    fCnt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    acknowledged: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.HandleDownlinkACKRequest}
 */
proto.as.HandleDownlinkACKRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.HandleDownlinkACKRequest;
  return proto.as.HandleDownlinkACKRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.HandleDownlinkACKRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.HandleDownlinkACKRequest}
 */
proto.as.HandleDownlinkACKRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcknowledged(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.HandleDownlinkACKRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.as.HandleDownlinkACKRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.as.HandleDownlinkACKRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.HandleDownlinkACKRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAcknowledged();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bytes dev_eui = 1;
 * @return {string}
 */
proto.as.HandleDownlinkACKRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.HandleDownlinkACKRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.HandleDownlinkACKRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.as.HandleDownlinkACKRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 f_cnt = 2;
 * @return {number}
 */
proto.as.HandleDownlinkACKRequest.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.as.HandleDownlinkACKRequest.prototype.setFCnt = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool acknowledged = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.HandleDownlinkACKRequest.prototype.getAcknowledged = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.as.HandleDownlinkACKRequest.prototype.setAcknowledged = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.SetDeviceStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.SetDeviceStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.SetDeviceStatusRequest.displayName = 'proto.as.SetDeviceStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.SetDeviceStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.SetDeviceStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.SetDeviceStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.SetDeviceStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    battery: jspb.Message.getFieldWithDefault(msg, 2, 0),
    margin: jspb.Message.getFieldWithDefault(msg, 3, 0),
    externalPowerSource: jspb.Message.getFieldWithDefault(msg, 4, false),
    batteryLevelUnavailable: jspb.Message.getFieldWithDefault(msg, 5, false),
    batteryLevel: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.SetDeviceStatusRequest}
 */
proto.as.SetDeviceStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.SetDeviceStatusRequest;
  return proto.as.SetDeviceStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.SetDeviceStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.SetDeviceStatusRequest}
 */
proto.as.SetDeviceStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattery(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMargin(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExternalPowerSource(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBatteryLevelUnavailable(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBatteryLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.SetDeviceStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.as.SetDeviceStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.as.SetDeviceStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.SetDeviceStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBattery();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMargin();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getExternalPowerSource();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBatteryLevelUnavailable();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getBatteryLevel();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional bytes dev_eui = 1;
 * @return {string}
 */
proto.as.SetDeviceStatusRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.SetDeviceStatusRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.SetDeviceStatusRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.as.SetDeviceStatusRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 battery = 2;
 * @return {number}
 */
proto.as.SetDeviceStatusRequest.prototype.getBattery = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.as.SetDeviceStatusRequest.prototype.setBattery = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 margin = 3;
 * @return {number}
 */
proto.as.SetDeviceStatusRequest.prototype.getMargin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.as.SetDeviceStatusRequest.prototype.setMargin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool external_power_source = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.SetDeviceStatusRequest.prototype.getExternalPowerSource = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.as.SetDeviceStatusRequest.prototype.setExternalPowerSource = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool battery_level_unavailable = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.SetDeviceStatusRequest.prototype.getBatteryLevelUnavailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.as.SetDeviceStatusRequest.prototype.setBatteryLevelUnavailable = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float battery_level = 6;
 * @return {number}
 */
proto.as.SetDeviceStatusRequest.prototype.getBatteryLevel = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.as.SetDeviceStatusRequest.prototype.setBatteryLevel = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.SetDeviceLocationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.SetDeviceLocationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.SetDeviceLocationRequest.displayName = 'proto.as.SetDeviceLocationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.SetDeviceLocationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.SetDeviceLocationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.SetDeviceLocationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.SetDeviceLocationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    location: (f = msg.getLocation()) && common_common_pb.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.SetDeviceLocationRequest}
 */
proto.as.SetDeviceLocationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.SetDeviceLocationRequest;
  return proto.as.SetDeviceLocationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.SetDeviceLocationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.SetDeviceLocationRequest}
 */
proto.as.SetDeviceLocationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = new common_common_pb.Location;
      reader.readMessage(value,common_common_pb.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.SetDeviceLocationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.as.SetDeviceLocationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.as.SetDeviceLocationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.as.SetDeviceLocationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes dev_eui = 1;
 * @return {string}
 */
proto.as.SetDeviceLocationRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.SetDeviceLocationRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.SetDeviceLocationRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.as.SetDeviceLocationRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional common.Location location = 2;
 * @return {?proto.common.Location}
 */
proto.as.SetDeviceLocationRequest.prototype.getLocation = function() {
  return /** @type{?proto.common.Location} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Location, 2));
};


/** @param {?proto.common.Location|undefined} value */
proto.as.SetDeviceLocationRequest.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.as.SetDeviceLocationRequest.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.as.SetDeviceLocationRequest.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.as.RXWindow = {
  RX1: 0,
  RX2: 1
};

/**
 * @enum {number}
 */
proto.as.ErrorType = {
  GENERIC: 0,
  OTAA: 1,
  DATA_UP_FCNT: 2,
  DATA_UP_MIC: 3,
  DEVICE_QUEUE_ITEM_SIZE: 4,
  DEVICE_QUEUE_ITEM_FCNT: 5
};

goog.object.extend(exports, proto.as);
