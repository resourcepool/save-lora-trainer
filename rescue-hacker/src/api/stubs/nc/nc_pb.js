/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var gw_gw_pb = require('../gw/gw_pb.js');
goog.exportSymbol('proto.nc.HandleUplinkMACCommandRequest', null, global);
goog.exportSymbol('proto.nc.HandleUplinkMetaDataRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nc.HandleUplinkMetaDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nc.HandleUplinkMetaDataRequest.repeatedFields_, null);
};
goog.inherits(proto.nc.HandleUplinkMetaDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nc.HandleUplinkMetaDataRequest.displayName = 'proto.nc.HandleUplinkMetaDataRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nc.HandleUplinkMetaDataRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nc.HandleUplinkMetaDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nc.HandleUplinkMetaDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nc.HandleUplinkMetaDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nc.HandleUplinkMetaDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    txInfo: (f = msg.getTxInfo()) && gw_gw_pb.UplinkTXInfo.toObject(includeInstance, f),
    rxInfoList: jspb.Message.toObjectList(msg.getRxInfoList(),
    gw_gw_pb.UplinkRXInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nc.HandleUplinkMetaDataRequest}
 */
proto.nc.HandleUplinkMetaDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nc.HandleUplinkMetaDataRequest;
  return proto.nc.HandleUplinkMetaDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nc.HandleUplinkMetaDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nc.HandleUplinkMetaDataRequest}
 */
proto.nc.HandleUplinkMetaDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = new gw_gw_pb.UplinkTXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkTXInfo.deserializeBinaryFromReader);
      msg.setTxInfo(value);
      break;
    case 3:
      var value = new gw_gw_pb.UplinkRXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkRXInfo.deserializeBinaryFromReader);
      msg.addRxInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nc.HandleUplinkMetaDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nc.HandleUplinkMetaDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nc.HandleUplinkMetaDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nc.HandleUplinkMetaDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTxInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      gw_gw_pb.UplinkTXInfo.serializeBinaryToWriter
    );
  }
  f = message.getRxInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      gw_gw_pb.UplinkRXInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes dev_eui = 1;
 * @return {string}
 */
proto.nc.HandleUplinkMetaDataRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.nc.HandleUplinkMetaDataRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.nc.HandleUplinkMetaDataRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.nc.HandleUplinkMetaDataRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional gw.UplinkTXInfo tx_info = 2;
 * @return {?proto.gw.UplinkTXInfo}
 */
proto.nc.HandleUplinkMetaDataRequest.prototype.getTxInfo = function() {
  return /** @type{?proto.gw.UplinkTXInfo} */ (
    jspb.Message.getWrapperField(this, gw_gw_pb.UplinkTXInfo, 2));
};


/** @param {?proto.gw.UplinkTXInfo|undefined} value */
proto.nc.HandleUplinkMetaDataRequest.prototype.setTxInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nc.HandleUplinkMetaDataRequest.prototype.clearTxInfo = function() {
  this.setTxInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nc.HandleUplinkMetaDataRequest.prototype.hasTxInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated gw.UplinkRXInfo rx_info = 3;
 * @return {!Array.<!proto.gw.UplinkRXInfo>}
 */
proto.nc.HandleUplinkMetaDataRequest.prototype.getRxInfoList = function() {
  return /** @type{!Array.<!proto.gw.UplinkRXInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, gw_gw_pb.UplinkRXInfo, 3));
};


/** @param {!Array.<!proto.gw.UplinkRXInfo>} value */
proto.nc.HandleUplinkMetaDataRequest.prototype.setRxInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.gw.UplinkRXInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gw.UplinkRXInfo}
 */
proto.nc.HandleUplinkMetaDataRequest.prototype.addRxInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.gw.UplinkRXInfo, opt_index);
};


proto.nc.HandleUplinkMetaDataRequest.prototype.clearRxInfoList = function() {
  this.setRxInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nc.HandleUplinkMACCommandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nc.HandleUplinkMACCommandRequest.repeatedFields_, null);
};
goog.inherits(proto.nc.HandleUplinkMACCommandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nc.HandleUplinkMACCommandRequest.displayName = 'proto.nc.HandleUplinkMACCommandRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nc.HandleUplinkMACCommandRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nc.HandleUplinkMACCommandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nc.HandleUplinkMACCommandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nc.HandleUplinkMACCommandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nc.HandleUplinkMACCommandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    cid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    commandsList: msg.getCommandsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nc.HandleUplinkMACCommandRequest}
 */
proto.nc.HandleUplinkMACCommandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nc.HandleUplinkMACCommandRequest;
  return proto.nc.HandleUplinkMACCommandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nc.HandleUplinkMACCommandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nc.HandleUplinkMACCommandRequest}
 */
proto.nc.HandleUplinkMACCommandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCid(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nc.HandleUplinkMACCommandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nc.HandleUplinkMACCommandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nc.HandleUplinkMACCommandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nc.HandleUplinkMACCommandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCommandsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes dev_eui = 1;
 * @return {string}
 */
proto.nc.HandleUplinkMACCommandRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.nc.HandleUplinkMACCommandRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.nc.HandleUplinkMACCommandRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.nc.HandleUplinkMACCommandRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 cid = 2;
 * @return {number}
 */
proto.nc.HandleUplinkMACCommandRequest.prototype.getCid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nc.HandleUplinkMACCommandRequest.prototype.setCid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated bytes commands = 6;
 * @return {!Array.<string>}
 */
proto.nc.HandleUplinkMACCommandRequest.prototype.getCommandsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * repeated bytes commands = 6;
 * This is a type-conversion wrapper around `getCommandsList()`
 * @return {!Array.<string>}
 */
proto.nc.HandleUplinkMACCommandRequest.prototype.getCommandsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getCommandsList()));
};


/**
 * repeated bytes commands = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommandsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.nc.HandleUplinkMACCommandRequest.prototype.getCommandsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getCommandsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.nc.HandleUplinkMACCommandRequest.prototype.setCommandsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.nc.HandleUplinkMACCommandRequest.prototype.addCommands = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.nc.HandleUplinkMACCommandRequest.prototype.clearCommandsList = function() {
  this.setCommandsList([]);
};


goog.object.extend(exports, proto.nc);
